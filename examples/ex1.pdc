module example

export good-rule
export good-rule2
export bad-rule
export simple-rule2


rule merge-2 (A, B, C, D) {
    merge {
        seq {
            more-of {
                seq {
                    A -> A: A1
                    A -> A: A2
                }
            }
            A -> A: ENDA

        }
        seq {
            B -> B: B1
            B -> B: B2
        }
    }
    A -> A: END
}

rule merge-1 (A, B) {
    merge {
        seq {
            many-of {
                A -> A: M1
            }
            A -> A: M2
        }
        seq {
            A -> A: L1
            A -> A: L2
        }
    }
    A -> A: END
}



rule atm(User, ATM) {
    loginWithWork <User, ATM, work>
}

rule loginWithWork <proc C, proc S, rule work (C, S)> (C, S) {
    C -> S: Identifier
    one-of {
        seq {
            S -> C: Success
            work
        }
        S -> C: Failure
    }    
}

rule work (User, ATM) {
    one-of {
        seq {
            User -> ATM: Deposit
//            User -> ATM: Amount
//            ATM -> USer: Balance
        }
        seq {
            User -> ATM: Withdraw
//            User -> ATM: Amount
//            one-of {
//                ATM -> User: Dispense
//                ATM -> User: Overdraft
//            }
        }
    }
}


rule one-of-call-caller (A, B) {
    one-of-call <A>
}

rule one-of-call <proc A> (A, B) {
    A -> B: S0
    one-of {
        seq {
            A -> B: S11
            one-of-call-called
            // A -> B: S12
        }
        A -> B: S21
    }
}

rule one-of-call-called (A, B) {
    // A -> B: CALLED
}




rule rec-call-2 (A, B, C, D) {
    merge {
        rec-call-2-help
        A -> B:MSG
    }
    A -> B: ENDEND
}

rule rec-call-2-help (A, B, C, D) {
    A -> B: REC
    optional rec-call-2-help
    A -> B: END
}


rule rec-call-1 (A, B, C, D) {
    A -> B: REC
    optional rec-call-1
    A -> B: END
}


rule many-of-test (A, B) {
    many-of {
        seq {
                many-of {
                    A -> B: MSG
                }
                A -> B: MSG
        }
    }
    B -> A: MSG2
}

rule many-of-test-5 (A, B) {
    many-of {
        A -> B: MSG
    }
    many-of {
        A -> B: MSG2
    }
    B -> A: MSG3
}

rule more-of-test-6 (A, B) {
    more-of {
        A -> B: MSG
    }
    more-of {
        A -> B: MSG2
    }
    B -> A: MSG3
}

rule merge-one-of (A, B) {
    merge {
        one-of {
            A -> B: MSG1
            A -> B: MSG2
        }
        B -> A: MSG3
    }
}


rule more-of-test (A, B, C, D) {
    more-of {
        seq {
            A -> B: MSG1
            A -> B: MSG2
        }
    }
    A -> B: END
}

rule more-of-seq0 (A, B, C, D) {
        more-of {
            seq {
                A -> C: REQ1
                C -> D: REQ2
            }
        }
}


rule merge-more-of-seq0 (A, B, C, D) {
    merge {
        more-of {
            seq {
                A -> C: REQ1
                C -> D: REQ2
            }
        }
    }
}

rule merge-more-of-seq (A, B, C, D) {
    merge {
        more-of {
            seq {
                A -> C: M11
                C -> D: M12
            }
        }
        seq {
            B -> C: M21
            C -> D: M22
        }
    }
    A -> A: END
}


rule nmerge(A) {
    merge {
        seq {
            A -> A: S11
            A -> A: S12
        }
        seq {
            A -> A: S21
            A -> A: S22
            A -> A: S23
        }
    }
}

rule merge-more-of-seq2 (A, B, C, D) {
    merge {
        many-of {
            A -> A: AA
        }
        B -> B: BB
    }
    C -> C: END
}

rule unseq1 (A, B) {
    unseq {
        A -> B: S1
        A -> B: S2
        A -> B: S3
    }
}

rule unseq2 (A, B) {
    unseq {
        seq {
            A -> B: S1
            A -> B: S2
        }
        seq {
            A -> B: S3
            A -> B: S4
        }
    }
}

rule caller1(A, B) {
    A -> B: S1
    called1
    A -> B: S3
}

rule called1(A, B) {
    A -> B: S2
}

rule caller2(A, B) {
    A -> B: S1
    called2_1
    A -> B: S4
}

rule called2_1(A, B) {
    A -> B: S2
    called2_2
}
rule called2_2(A, B) {
    A -> B: S3
}

rule caller3(A, B) {
    A -> B: S1
    many-of {
        called3_1
        called3_2
    }
    A -> B: S4
}

rule called3_1(A, B) {
    A -> B: S2
}
rule called3_2(A, B) {
    A -> B: S3
}

rule caller4(A, B) {
    A -> B: S1
    many-of {
        called4
    }
}

rule called4(A, B) {
    A -> B: S2
}


rule opt1(A,B) {
    optional A -> B: MSG
}

rule opt2(A,B) {
    optional A -> B: MSG
    A -> B: END
}

rule opt3(A,B) {
    optional seq {
        A -> B: MSG1
        A -> B: MSG2
    }
    optional seq {
        A -> B: MSG3
        A -> B: MSG4
    }
}

rule opt4(A,B) {
    optional seq {
        A -> B: MSG1
        A -> B: MSG2
    }
    optional seq {
        A -> B: MSG3
        A -> B: MSG4
    }
    A -> B: END
}

rule opt5(A,B) {
    optional one-of {
        A -> B: MSG1
        seq {
            A -> B: MSG2
            A -> B: MSG3
            optional A -> B: MSG4
            A -> B: END2
        }
        optional seq {
            A -> B: MSG5
        }
    }
    A -> B: END
}


rule good-rule(A, B) {
    A -> B : REQ
    B -> A : WHUT
}

rule good-rule2(A, B) {
    A -> B : REQ
    B -> A : WHUT
    B -> A : WHUT
    B -> A : WAWA
    B -> A : WHUT
    B -> A : RES
}

rule merge1 (A, B) {
    merge {
        A -> B: REQ
        B -> A: WHUT
    }
}

rule merge2 (A, B) {
    merge {
        A -> B: REQ
        B -> A: WHUT
    }
}

rule merge3 (A, B) {
    merge {
        seq {
            A -> B: S1
            B -> A: S2
        }
        seq {
            B -> A: S3
            B -> A: S4
        }
    }
}

rule merge4 (A, B) {
    merge {
        seq {
            A -> B: REQ
            B -> A : WHUT
            B -> A : WAWA
        }
        seq {
            B -> A : WHUT
        }
    }
}

rule merge5 (A, B) {
    merge {
        seq {
            A -> B : S1
            B -> A : S2
        }
        seq {
            B -> A : S3
            B -> A : S4
        }
        seq {
            B -> A : S5
            B -> A : S6
        }
    }
}

rule merge51 (A,B) {
    merge {
            A -> B : S1
            B -> A : S2
            B -> A : S3
    }    
}

rule merge6 (A, B) {
    merge {
        seq {
            A -> B : REQ
            B -> A : WHUT
            B -> A : WAWA
        }
        seq {
            B -> A : WHUT
        }
        B -> A : WHUT
        B -> A : RES
    }
}

rule merge7 (A, B) {
    merge {
        seq {
            A -> B : REQ
            B -> A : WHUT
            B -> A : WHUT
        }
        seq {
            B -> A : WAWA
        }
    }
}

rule merge8 (A, B) {
    merge {
        seq {
            A -> B : AA
            A -> B : BB
            A -> B : CC
        }
        seq {
            A -> B : DD
        }
    }
}

rule merge9 (A, B) {
    merge {
        seq {
            A -> B : AA
            A -> B : BB
        }
        seq {
            A -> B : CC
            A -> B : DD
        }
    }
}


rule merge10 (A, B) {
    merge {
        one-of {
            A -> B: S1
            A -> B: S2
        }
        A -> B: S3
    }
}

rule bmerge1 (A, B) {
    merge {
        B -> A: WHUT
        B -> A: R
    }
}

rule bmerge2 (A, B) {
    merge {
        A -> B : REQ
        A -> B : BAD
    }
}


rule morule1 (A, B) {
    many-of {
        A -> B: REQ
        B -> A: RES
    }
    A -> B: END
}


rule moreof1 (A, B) {
    more-of {
        A -> B: REQ
        B -> A: RES
    }
    A -> B: END
}

rule oorule1 (A, B) {
    one-of {
        A -> B: REQ
        B -> A: REQ
    }
}

rule oorule2 (A, B) {
    one-of {
        one-of {
            B -> A: REQ
        }
        A -> B: REQ
    }
}

rule oorule3 (A, B) {
    one-of {
        seq {
            A -> B: REQ
            B -> A: WHUT
            B -> A: WHUT
        }
        seq {
            B -> A: WHUT
            A -> B: REQ
            B -> A: WHUT
        }
    }
}

rule oorule4 (A, B) {
    A -> B: REQ
    one-of {
        seq {
            B -> A: WHUT
        }
        seq {
            A -> B: REQ
        }
    }
    B -> A: WHUT
}

rule bad-oorule1 (A, B) {
    one-of {
        A -> B: BAD
        B -> A: BAD
    }
}

rule bad-rule(A, B) {
    A -> B : RES
}

rule simple-rule(A, B) {
	A -> B : DD
}

rule simple-rule2(A, B) {
    A -> B : REQ
    many-of {
        B -> A : WHUT
        B -> A : WAWA
    }
    B -> A : RES
}
